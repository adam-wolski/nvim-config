# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet for "Simple for loop" b
for(int32 ${1:i} = ${2:0}; ${1} < ${3}; ++${1})
{
	${0}
}
endsnippet

snippet foreach "Simple for each loop" b
for(${1:const auto&} ${2} : ${3})
{
	${0}
}
endsnippet

snippet lam "Create new variable lambda" b
auto ${1} = [${2}](${3:auto x}) {
	${0}
};
endsnippet

snippet lam "Create new variable lambda" w
[${1}](${2:auto x}) { ${0} }
endsnippet

snippet asyncr "Async render call" b
AsyncRender([${1}](FRHICommandListImmediate& RHICmdList) {  
	${0}
});
endsnippet

snippet testnewcpp "New unreal test file" b
#include "CoreMinimal.h"

#include "Misc/AutomationTest.h"	  // IMPLEMENT_SIMPLE_AUTOMATION_TEST

IMPLEMENT_SIMPLE_AUTOMATION_TEST(${1}, "${2}", EAutomationTestFlags::EditorContext | EAutomationTestFlags::EngineFilter);

bool ${1}::RunTest(const FString& /*Params*/)
{
	${0}
	return true;
}
endsnippet

snippet testnew "New unreal test" b
IMPLEMENT_SIMPLE_AUTOMATION_TEST(${1}, "${2}", EAutomationTestFlags::EditorContext | EAutomationTestFlags::EngineFilter);

bool ${1}::RunTest(const FString& /*Params*/)
{
	${0}
	return true;
}
endsnippet

snippet inc "Include header.h // " i
include "${1}.h" // ${2:$1}
endsnippet
